CREATE FUNCTION CALL_TEST_OUT_INTEGER_TYPES(IN p_id INTEGER, OUT p_smallIntVal SMALLINT, OUT p_intVal INT,
OUT p_bigIntVal BIGINT) AS '
BEGIN
    SELECT SMALLINT_VAL INTO p_smallIntVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id;
    SELECT INT_VAL INTO p_intVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id;
    SELECT BIGINT_VAL INTO p_bigIntVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql;
/
CREATE FUNCTION CALL_TEST_INOUT_INTEGER_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_smallIntVal SMALLINT, INOUT p_intVal INT,
INOUT p_bigIntVal BIGINT) AS '
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_INTEGER_TYPES VALUES(p_id_in, p_smallIntVal, p_intVal, p_bigIntVal);
    SELECT SMALLINT_VAL INTO p_smallIntVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id_out;
    SELECT INT_VAL INTO p_intVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id_out;
    SELECT BIGINT_VAL INTO p_bigIntVal FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql;
/
CREATE FUNCTION CALL_TEST_OUT_FIXED_POINT_TYPES(IN p_id INTEGER, OUT p_decimalVal DECIMAL(5, 2)
,OUT p_numericVal NUMERIC(7, 3)) AS '
BEGIN
    SELECT DECIMAL_VAL INTO p_decimalVal FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = p_id;
    SELECT NUMERIC_VAL INTO p_numericVal FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql;
/
CREATE FUNCTION CALL_TEST_INOUT_FIXED_POINT_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_decimalVal DECIMAL
,INOUT p_numericVal NUMERIC) AS '
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FIXED_POINT_TYPES VALUES(p_id_in, p_numericVal, p_decimalVal);
    SELECT DECIMAL_VAL INTO p_decimalVal FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = p_id_out;
    SELECT NUMERIC_VAL INTO p_numericVal FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql;
/
CREATE FUNCTION CALL_TEST_OUT_STRING_TYPES(IN p_id INTEGER, OUT p_varcharVal VARCHAR(20), OUT p_textVal TEXT) AS '
BEGIN
    SELECT VARCHAR_VAL INTO p_varcharVal FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = p_id;
    SELECT TEXT_VAL INTO p_textVal FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql
 /
CREATE FUNCTION CALL_TEST_INOUT_STRING_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_varcharVal VARCHAR(20), INOUT p_textVal TEXT) AS '
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_STRING_TYPES VALUES(p_id_in, p_varcharVal, p_textVal);
    SELECT VARCHAR_VAL INTO p_varcharVal FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = p_id_out;
    SELECT TEXT_VAL INTO p_textVal FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql
/
CREATE FUNCTION CALL_TEST_OUT_DATETIME_TYPES(IN p_id INTEGER, OUT p_dateInt DATE, OUT p_timeInt TIME,
OUT p_timezInt TIME, OUT p_timestampInt TIMESTAMP, OUT p_timestampzInt TIMESTAMPTZ) AS '
BEGIN
    SELECT DATE_VAL INTO p_dateInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id;
    SELECT TIME_VAL INTO P_timeInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id;
    SELECT TIMEZ_VAL INTO p_timezInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id;
    SELECT TIMESTAMP_VAL INTO p_timestampInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id;
    SELECT TIMESTAMPZ_VAL INTO p_timestampzInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql
 /
CREATE FUNCTION CALL_TEST_INOUT_DATETIME_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_dateInt DATE, INOUT p_timeInt TIME,
INOUT p_timezInt TIME, INOUT p_timestampInt TIMESTAMP, INOUT p_timestampzInt TIMESTAMPTZ) AS '
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_DATETIME_TYPES VALUES(p_id_in, p_dateInt, p_timeInt, p_timezInt, p_timestampInt, p_timestampzInt);
    SELECT DATE_VAL INTO p_dateInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id_out;
    SELECT TIME_VAL INTO P_timeInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id_out;
    SELECT TIMEZ_VAL INTO p_timezInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id_out;
    SELECT TIMESTAMP_VAL INTO p_timestampInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id_out;
    SELECT TIMESTAMP_VAL INTO p_timestampzInt FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql
/
CREATE FUNCTION CALL_TEST_OUT_COMPLEX_TYPES(IN p_id INTEGER, OUT p_binaryVal BYTEA) AS '
BEGIN
    SELECT BINARY_VAL INTO p_binaryVal FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql
 /
CREATE FUNCTION CALL_TEST_INOUT_COMPLEX_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_binaryVal BYTEA) AS '
BEGIN
     INSERT INTO SELECT_UPDATE_TEST_COMPLEX_TYPES VALUES(p_id_in, p_binaryVal);
     SELECT BINARY_VAL INTO p_binaryVal FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql
/
CREATE FUNCTION CALL_TEST_OUT_FLOAT_TYPES(IN p_id INTEGER, OUT p_realVal REAL, OUT p_doubleVal DOUBLE PRECISION) AS '
BEGIN
    SELECT VARCHAR_VAL INTO p_realVal FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = p_id;
    SELECT TEXT_VAL INTO p_doubleVal FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = p_id;
END
' LANGUAGE plpgsql
 /
CREATE FUNCTION CALL_TEST_INOUT_FLOAT_TYPES(IN p_id_in INTEGER, IN p_id_out INTEGER, INOUT p_realVal REAL, INOUT p_doubleVal DOUBLE PRECISION) AS '
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FLOAT_TYPES VALUES(p_id_in, p_realVal);
    SELECT VARCHAR_VAL INTO p_realVal FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = p_id_out;
    SELECT TEXT_VAL INTO p_doubleVal FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = p_id_out;
END
' LANGUAGE plpgsql







